[[!img 2020-08-15_12-04.png size="800x" ]]

This tutorial is about generating better GTKWave documents (*.gtkw)
from Python. The goal is to ease analysis of traces generated by
unit-tests, and at the same time to better understand the inner working
of modules, for which we are writing such tests.

# Stylish GTKWave Documents

In this tutorial, you will learn how to:

1. Use individual trace colors.  
   For instance, use different color styles for input, output, debug and
   internal traces.
2. Use numeric bases besides the default hex.
3. Create collapsible trace groups  
   Useful to hide and show, at once, groups of debug, internal and
   sub-module traces.  
   Select the opening or closing brace, then use the T key.
4. Add comments in the signal names pane
5. Change the displayed name of a trace
6. Use a sane default for initial zoom level
7. Place markers on interesting places
8. Put the generating file name as a comment in the file

## Basic trace display

First, we need a VCD file. Try:

    python -m nmutil.test.example_gtkwave

Among other files, it will generate ``test_shifter.vcd``.

Lets write a simple GTKW document. First, import the function:

    from nmutil.gtkw import write_gtkw

Create a list of the traces you want to see. Some hints:

1. Put all trace names in quotes.
2. Use the same names as you would see in the trace pane of GTKWave
3. If a trace is multi-bit, use array notation 'name[max:min]' 

For example:

    traces = [
        'clk',
        # prev port
        'op__sdir', 'p_data_i[7:0]', 'p_shift_i[7:0]', 'p_valid_i', 'p_ready_o',
        # internal signals
        'fsm_state', 'count[3:0]', 'shift_reg[7:0]',
        # next port
        'n_data_o[7:0]', 'n_valid_o', 'n_ready_i'
    ]

Now, create the document:

    write_gtkw("simple.gtkw", "test_shifter.vcd", traces, module='top.shf')

Remarks:

1. ``simple.gtkw`` is the name of our GTKWave document
2. ``test_shifter.vcd`` is the VCD file
3. ``traces`` is a list of trace names
4. ``top.shf`` is the hierarchy path of the module

# New signals at simulation time

At simulation time, you can declare a new signal, and use it inside
the test case, as any other signal. By including it in the "traces"
parameter of Simulator.write_vcd, it is included in the trace dump
file.

Useful for adding "printf" style debugging for GTKWave.

# String traces

When declaring a Signal, you can pass a custom decoder that
translates the Signal logic level to a string. nMigen uses this
internally to display Enum traces, but it is available for general
use.

Some applications are:

1. Display a string when a signal is at high level, otherwise show a
   single horizontal line. Useful to draw attention to a time interval.
2. Display the stages of a unit test
3. Display arbitrary debug statements along the timeline.
