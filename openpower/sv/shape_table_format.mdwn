Shape is 32-bits.  When SHAPE is set entirely to zeros, remapping is
disabled: the register's elements are a linear (1D) vector.

| 31..30   | 29..24 | 23..21  | 20..18  | 17..12  | 11..6   | 5..0    |
| -------- | ------ | ------- | ------- | ------- | ------- | ------- |
| mode     | offset | invxyz  | permute | zdimsz  | ydimsz  | xdimsz  |

mode sets different behaviours (straight matrix multiply, FFT, DCT).

* **mode=0b00** sets matrix multiply
* **mode=0b01** sets FFT
* **mode=0b10** is reserved
* **mode=0b11** is reserved

invxyz will invert the start index of each of x, y or z. If invxyz[0] is
zero then x-dimensional counting begins from 0 and increments, otherwise
it begins from xdimsz-1 and iterates down to zero. Likewise for y and z.

offset will have the effect equivalent to the sequential element loop
to appear to run for offset (additional) iterations prior to actually
generating output.  in pseudo-code the loop would be:

    for index in offset to (offset+VL-1)

xdimsz, ydimsz and zdimsz are offset by 1, such that a value of 0 indicates
that the array dimensionality for that dimension is 1. any dimension
not intended to be used must have its value set to 0 (dimensionality
of 1).  A value of xdimsz=2 would indicate that in the first dimension
there are 3 elements in the array.  For example, to create a 2D array
X,Y of dimensionality X=3 and Y=2, set xdimsz=2, ydimsz=1 and zdimsz=0

The format of the array is therefore as follows:

    array[xdimsz+1][ydimsz+1][zdimsz+1]

However whilst illustrative of the dimensionality, that does not take the
"permute" setting into account.  "permute" may be any one of six values
(0-5, with values of 6 and 7 being reserved, and not legal).  The table
below shows how the permutation dimensionality order works:

| permute | order | array format             |
| ------- | ----- | ------------------------ |
| 000     | 0,1,2 | (xdim+1)(ydim+1)(zdim+1) |
| 001     | 0,2,1 | (xdim+1)(zdim+1)(ydim+1) |
| 010     | 1,0,2 | (ydim+1)(xdim+1)(zdim+1) |
| 011     | 1,2,0 | (ydim+1)(zdim+1)(xdim+1) |
| 100     | 2,0,1 | (zdim+1)(xdim+1)(ydim+1) |
| 101     | 2,1,0 | (zdim+1)(ydim+1)(xdim+1) |

In other words, the "permute" option changes the order in which
nested for-loops over the array would be done.  See executable
python reference code for further details.

