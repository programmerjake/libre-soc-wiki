# Implementation

This page covers and coordinates implementing SV.  The basic concept is
to go step-by-step through the [[sv/overview]] adding each feature,
one at a time.

Links:

* <http://lists.libre-soc.org/pipermail/libre-soc-dev/2021-January/001865.html>
* <https://bugs.libre-soc.org/show_bug.cgi?id=578> python-based svp64
  assembler translator
* <https://bugs.libre-soc.org/show_bug.cgi?id=577> gcc/binutils/svp64
* <https://bugs.libre-soc.org/show_bug.cgi?id=241> gem5 / ISACaller simulator

# Code to convert

There are three projects:

* TestIssuer (the HDL)
* ISACaller (the python-based simulator)
* power-gem5 (a cycle accurate simulator)

Each of these needs to have SV augmentation, and the best way to
do it is if they are all done at the same time, implementing the same
incremental feature.

# Critical tasks

These are prerequisite tasks:

* power-gem5 automanagement, similar to pygdbmi for starting qemu
  found this <https://www.gem5.org/documentation/general_docs/debugging_and_testing/debugging/debugging_simulated_code>
  just use pygdbmi
* c++, c and python macros for generating [[sv/svp64]] assembler
  (svp64 prefixes)

People coordinating different tasks. This doesn't mean exclusive work on these areas it just means they are the "coordinator" and lead:

* Lauri:
* Jacob:
* Cesar: TestIssuer FSM
* Alain: power-gem5
* Cole:
* Luke: ISACaller
* Tobias:
* Alexandre: 

