# Commits for litex:

the following have been identified as working with sim.py.  dependencies:

    litex commit 35929c0f8a8f1cc098a6b6ebb569caca8df8c08d 
    litedram commit 198bcbab676e2b4065e5b6a7dc8a7733bae8315a
    pythondata-cpu-microwatt commit ba76652320e9dc23d9b2c64a62d0a752c870a215 
    pythondata-misc-tapcfg commit 25c97a4a9ff9af85248028fe01e2c65b2e3640ee

    apt-get install libjson-c-dev
    apt-get install libevent-dev
    apt-get install verilator

# build process for litex sim

very simple:

    make run_sim

# build process for ls180

for the variant without 4k srams:

    cd soc
    make ls180_verilog
    cd src/soc/litex/florent
    make ls180
    cp ls180.il /tmp

at this point you can copy ls180.il over to the coriolis2 chroot,
into soclayout experiments9:

    soclayout/experiments9/non_generated/full_core_ls180.il 

and you can then begin the build process inside the coriolis2 chroot:

    cd soclayout/experiments9
    nohup ./build_full.sh &

**note that you will need yosys checkout 049e3abf9 for the coriolis2 build**
this is encoded into the dev-env-setup script which automates the chroot
creation <https://git.libre-soc.org/?p=dev-env-setup.git;a=blob;f=coriolis2-chroot;hb=HEAD>

# build process for ls180 with 4k srams

for the variant with 4k srams:

    cd soc
    make ls180_4k_verilog
    cd src/soc/litex/florent
    make ls1804k
    cp ls180.il /tmp

at this point you can copy ls180.il over to the coriolis2 chroot,
into soclayout experiments9 in a **different** location from the
above:

    soclayout/experiments9/non_generated/full_core_4_4ksram_ls180.il 

and you can then begin the build process inside the coriolis2 chroot:

    cd soclayout/experiments9
    nohup ./build_full_4ksram.sh &

**note that you will need yosys checkout 049e3abf9 for the coriolis2 build**
this is encoded into the dev-env-setup script which automates the chroot
creation <https://git.libre-soc.org/?p=dev-env-setup.git;a=blob;f=coriolis2-chroot;hb=HEAD>
